function DatStore = SolveStaticOptimization_IPOPT_CasADi(DatStore,Misc,trial)
% SolveStaticOptimization_IPOPT_CasADi solves the muscle redundancy problem
% assuming rigid tendons.

%% Inputs
% the number of muscles, dofs, frames
time = DatStore(trial).time;
N = length(time);
M = DatStore(trial).nMuscles;
nDOF = DatStore(trial).nDOF;

% get current position on F/L and F/V curves (assuming rigid tendons)
act = ones(N,M);
FMltilde = ones(N,M);
FMvtilde = ones(N,M);
Fpe = ones(N,M);
cos_alpha = ones(N,M);
for m = 1:M
    pp_y = spline(time,DatStore(trial).LMT(:,m));
    [LMTg,vMTg,~] = SplineEval_ppuval(pp_y,time,1);
    [~, ~, FMltilde(:,m), FMvtilde(:,m), Fpe(:,m), cos_alpha(:,m)] = ...
        HillModel_RigidTendon(act(:,m),LMTg,vMTg,Misc.params(:,Misc.idx_allMuscleList{trial}(m)));
    clear pp_y 
end
FMo = ones(size(act,1),1)*Misc.FMo(:,Misc.idx_allMuscleList{trial});
Fpas = FMo.*Fpe.*cos_alpha;
Fact = FMo.*FMltilde.*FMvtilde.*cos_alpha;

% Optimal force reserve actuators
Topt = 1;

%get the ID data
ID_data = DatStore(trial).T_exp;

%% Formulate and solve optimization problem
% ----------------------------
import casadi.*
opti    = casadi.Opti();   % Create opti instance

% optimization variables
a       = opti.variable(N,M); % muscle activations
ar      = opti.variable(N,nDOF); % reserve actuators

% initial guess
opti.set_initial(a,0);
opti.set_initial(ar,0);

% bounds on optimization variables
opti.subject_to(0 < a < 1);
opti.subject_to(-1500000 <ar < 1500000);

% constraints: equilibrium of forces
Fm = a.*Fact + Fpas;
for i=1:nDOF
    dM = squeeze(DatStore(trial).dM(:,i,:));    
    Tm = sum(dM.*Fm,2); % torque generated by muscles
    Tr = ar(:,i).*Topt; % torque of ideal actuators
    opti.subject_to(ID_data(:,i) == (Tm + Tr));
end

% Settings
optionssol.ipopt.nlp_scaling_method = 'gradient-based';
optionssol.ipopt.linear_solver = 'mumps';
optionssol.ipopt.tol = 1e-6;
optionssol.ipopt.max_iter = 1000;

% objective function
J = sumsqr(a) + 1000.*sumsqr(ar);
opti.minimize(J);

% Solver
opti.solver('ipopt',optionssol);
sol = opti.solve();


%% extract results

DatStore(trial).SoAct = sol.value(a);
DatStore(trial).SoRAct = sol.value(ar).*(Topt*ones(N,1));
DatStore(trial).SoForce = FMo.*(DatStore(trial).SoAct.*FMltilde.*FMvtilde + Fpe); 
DatStore(trial).cos_alpha = cos_alpha;





